document.addEventListener("DOMContentLoaded", () => {
  const activitiesList = document.getElementById("activities-list");
  const activitySelect = document.getElementById("activity");
  const signupForm = document.getElementById("signup-form");
  const messageDiv = document.getElementById("message");
  const searchBox = document.getElementById("search-box");
  const sortSelect = document.getElementById("sort-select");

  // Function to fetch activities from API
  async function fetchActivities() {
    try {
      // Get filter values
      const search = searchBox ? searchBox.value.trim() : "";
      const sort = sortSelect ? sortSelect.value : "";
      
      // Build query parameters
      const params = new URLSearchParams();
      if (search) params.append("search", search);
      if (sort) params.append("sort", sort);
      params.append("order", "asc"); // Default order
      
      const url = `/activities${params.toString() ? '?' + params.toString() : ''}`;
      const response = await fetch(url);
      const activities = await response.json();

      // Clear activities list
      activitiesList.innerHTML = "";
      
      // Clear activity select options
      activitySelect.innerHTML = '<option value="">-- Select an activity --</option>';

      if (Object.keys(activities).length === 0) {
        activitiesList.innerHTML = '<p>No activities found.</p>';
        return;
      }

      // Render activities
      Object.entries(activities).forEach(([name, details]) => {
        // Create activity card
        const activityCard = document.createElement("div");
        activityCard.className = "activity-card";
        
        const participantsHtml = details.participants.length > 0 
          ? `<div class="participants-container">
               <div class="participants-section">
                 <h5>Participants (${details.participants.length}/${details.max_participants}):</h5>
                 <ul>
                   ${details.participants.map(email => 
                     `<li>
                        <span class="participant-email">${email}</span>
                        <button class="delete-btn" onclick="unregisterParticipant('${name}', '${email}')" title="Unregister">âœ—</button>
                      </li>`
                   ).join('')}
                 </ul>
               </div>
             </div>`
          : `<div class="participants-container">
               <div class="participants-section">
                 <p>No participants yet</p>
               </div>
             </div>`;

        activityCard.innerHTML = `
          <h4>${name}</h4>
          <p><strong>Description:</strong> ${details.description}</p>
          <p><strong>Schedule:</strong> ${details.schedule}</p>
          <p><strong>Capacity:</strong> ${details.participants.length}/${details.max_participants}</p>
          ${participantsHtml}
        `;
        
        activitiesList.appendChild(activityCard);

        // Add to select dropdown
        const option = document.createElement("option");
        option.value = name;
        option.textContent = name;
        activitySelect.appendChild(option);
      });

    } catch (error) {
      console.error("Error fetching activities:", error);
      activitiesList.innerHTML = '<p>Error loading activities. Please try again.</p>';
    }
  }

  // Function to unregister a participant
  async function unregisterParticipant(activity, email) {

  // Handle form submission
  signupForm.addEventListener("submit", async (event) => {
    event.preventDefault();

    const email = document.getElementById("email").value;
    const activity = document.getElementById("activity").value;

    try {
      const response = await fetch(
        `/activities/${encodeURIComponent(
          activity
        )}/signup?email=${encodeURIComponent(email)}`,
        {
          method: "POST",
        }
      );

      const result = await response.json();

      if (response.ok) {
        messageDiv.textContent = result.message;
        messageDiv.className = "success";
        signupForm.reset();

        // Refresh activities list to show updated participants
        fetchActivities();
      } else {
        messageDiv.textContent = result.detail || "An error occurred";
        messageDiv.className = "error";
      }

      messageDiv.classList.remove("hidden");

      // Hide message after 5 seconds
      setTimeout(() => {
        messageDiv.classList.add("hidden");
      }, 5000);
    } catch (error) {
      messageDiv.textContent = "Failed to sign up. Please try again.";
      messageDiv.className = "error";
      messageDiv.classList.remove("hidden");
      console.error("Error signing up:", error);
    }
  });

  // Add event listeners for filters
  if (searchBox) {
    searchBox.addEventListener("input", () => fetchActivities());
  }
  if (sortSelect) {
    sortSelect.addEventListener("change", () => fetchActivities());
  }

  // Initialize app
  fetchActivities();
});
